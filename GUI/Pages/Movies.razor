@page "/movies"

<PageTitle>Movies</PageTitle>

@using Entities
@inject IRepository _repository



    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Summary</th>
            <th>Release Year</th>
            <th>Box Office (in millions)</th>
            <th>Action</th>
        </tr>
        </thead>
        <tbody>
        @if (_movies == null || new List<Movie>(_movies).Count == 0)
                {
                    <tr>
        
                        <td colspan="5" style="text-align: center; vertical-align: middle;"><h4>There are no movies to display</h4></td>
                
                 
                    </tr>
                        
                    
                  
                }
        else
        {
            @foreach (var movie in _movies)
                    {
                        <tr>
                            <td>@movie.Title</td>
                            <td>@movie.Summary</td>
                            <td>@movie.ReleaseYear</td>
                            <td>@movie.BoxOfficeSumInMillions</td>
                            <th><button onclick="@(() => RemoveMovie(movie))">Remove</button></th>
                        </tr>
                    }
        }
        
        </tbody>
        <tbody>
        <tr>
                
                                <td colspan="5" style="text-align: center; vertical-align: middle;"><h4>Add a new movie:</h4></td>
                        
                         
                            </tr>
        <tr>
            <td><input placeholder="Movie title" @bind="MovieTitle"/></td>
            <td><input placeholder="Short summary"/></td>
            <td><input placeholder="Release year" type="number"/></td>
            <td><input placeholder="Earnings" type="number"/></td>
            <td><button onclick="@(() => AddMovie())">Add</button></td>
        </tr>
        </tbody>
    </table>


@code {
    private IEnumerable<Movie> _movies;
    
    private string MovieTitle { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _movies = _repository.GetMovies();
    }

    private async Task RemoveMovie(Movie movie)
    {
        var deletedMovie = _repository.DeleteMovie(movie.Id);
        _movies = _movies.Where(m => !m.Equals(deletedMovie));
    }

    private async Task AddMovie()
    {
        Console.WriteLine(MovieTitle);
        
    }

}